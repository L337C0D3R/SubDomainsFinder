name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Purge Cloudflare Cache
        run: |
          # Check if there is a previous commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            FILES=$(git diff --name-only HEAD^ HEAD | grep -E '\.html$|\.css$|\.js$|\.png$|\.jpg$')
          else
            FILES=$(git diff --name-only HEAD | grep -E '\.html$|\.css$|\.js$|\.png$|\.jpg$')
          fi

          if [ -n "$FILES" ]; then
            URLS=$(echo "$FILES" | sed 's|^|https://yourdomain.com/|') # Replace 'yourdomain.com' with your actual domain
            curl --request POST \
            --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}' \
            --data "{\"files\":[$(echo "$URLS" | sed 's/$/,/' | tr '\n' ' ' | sed 's/, $//')]}"
          else
            echo "No files to purge."
          fi

