name: Deploy static content to Pages
on:
  push:
    branches: ["main"]
  workflow_dispatch:
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch the last two commits
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Get Modified Files
        id: git_diff
        run: |
          git diff --name-only HEAD^ HEAD > modified_files.txt
      - name: Filter Web Files
        id: filter_files
        run: |
          grep -E '\.(html|css|js|png|jpg|jpeg|gif|ico|webmanifest|xml|txt)$' modified_files.txt > web_files.txt
      - name: Format URLs for Purging
        id: format_urls
        run: |
          base_url="https://subdomainfinder.in"
          urls=$(while read -r file; do
            if [[ "$file" == "index.html" ]]; then
              echo "$base_url/"
              echo "$base_url/index.html"
            else
              echo "$base_url/$file"
            fi
          done < web_files.txt | jq -R -s 'split("\n")[:-1]')
          echo "urls=$urls" >> $GITHUB_OUTPUT
          echo "Files to purge: $urls"
      - name: Purge Modified Files from Cloudflare Cache
        run: |
          urls=${{ steps.format_urls.outputs.urls }}
          if [ "$urls" != "[]" ]; then
            json_data="{\"files\":$urls}"
            echo "JSON payload being sent to Cloudflare: $json_data"
            curl --request POST \
            --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}' \
            --data "$json_data"
          else
            echo "No relevant files to purge."
          fi
